{"version":3,"sources":["../node_modules/codemirror/mode/xml/xml.js","../node_modules/codemirror/mode/htmlmixed/htmlmixed.js","../node_modules/codemirror/mode/soy/soy.js"],"names":["CodeMirror","htmlConfig","autoSelfClosers","area","base","br","col","command","embed","frame","hr","img","input","keygen","link","meta","param","source","track","wbr","menuitem","implicitlyClosed","dd","li","optgroup","option","p","rp","rt","tbody","td","tfoot","th","tr","contextGrabbers","dt","address","article","aside","blockquote","dir","div","dl","fieldset","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","menu","nav","ol","pre","section","table","ul","thead","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","defineMode","editorConf","config_","type","setStyle","indentUnit","config","defaults","htmlMode","prop","inText","stream","state","chain","parser","tokenize","ch","next","eat","match","inBlock","eatWhile","doctype","depth","inTag","baseState","tagName","tagStart","test","quote","closure","eol","isInAttribute","inAttribute","stringStartCol","column","style","terminator","Context","startOfLine","this","prev","context","indent","indented","hasOwnProperty","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","current","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","isInText","startState","baseIndent","token","sol","indentation","eatSpace","textAfter","fullLine","Pass","length","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","blockCommentStart","blockCommentEnd","configuration","helperType","skipAttribute","xmlCurrentTag","name","close","xmlCurrentContext","cx","push","reverse","defineMIME","mimeModes","mod","__webpack_require__","defaultTags","script","attrRegexpCache","getAttrValue","text","attr","regexp","RegExp","getAttrRegexp","getTagRegexp","anchored","addTags","from","to","tag","dest","i","unshift","parserConfig","getMode","tags","configTags","configScript","scriptTypes","matches","mode","html","htmlState","toLowerCase","modeSpec","tagInfo","tagText","spec","findMatchingMode","endTagA","endTag","localState","localMode","pat","cur","search","backUp","maybeBackup","copyState","local","line","innerMode","paramData","noEndTag","soyState","alias","delpackage","namespace","@param","@param?","@inject","@inject?","@state","template","variableScope","literal","msg","fallbackmsg","reduceIndent","select","plural","let","if","elseif","else","switch","case","default","foreach","ifempty","for","call","print","deltemplate","delcall","log","element","indentingTags","Object","keys","filter","textMode","modes","attributes","uri","trusted_resource_uri","css","js","statementIndent","last","array","tokenUntil","untilRegExp","oldString","string","substr","pos","index","result","hideFirstChars","localStates","prepend","list","popcontext","scope","variables","previousContext","kind","expression","loose","lookupVariables","quoteKind","contains","scopes","concat","map","pop","skipToEnd","paramRe","peekChar","peek","indexOf","substring","selfClosed","prevTag","indentingTag","tagError","top","lineComment","blockCommentContinue","useInnerComments","fold","registerHelper"],"mappings":"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","file":"static/js/17.b566baab.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          if (cx.tagName) context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../javascript/javascript\"), require(\"../css/css\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../javascript/javascript\", \"../css/css\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var defaultTags = {\n    script: [[\"lang\", /(javascript|babel)/i, \"javascript\"], [\"type\", /^(?:text|application)\\/(?:x-)?(?:java|ecma)script$|^module$|^$/i, \"javascript\"], [\"type\", /./, \"text/plain\"], [null, null, \"javascript\"]],\n    style: [[\"lang\", /^css$/i, \"css\"], [\"type\", /^(text\\/)?(x-)?(stylesheet|css)$/i, \"css\"], [\"type\", /./, \"text/plain\"], [null, null, \"css\"]]\n  };\n\n  function maybeBackup(stream, pat, style) {\n    var cur = stream.current(),\n        close = cur.search(pat);\n\n    if (close > -1) {\n      stream.backUp(cur.length - close);\n    } else if (cur.match(/<\\/?$/)) {\n      stream.backUp(cur.length);\n      if (!stream.match(pat, false)) stream.match(cur);\n    }\n\n    return style;\n  }\n\n  var attrRegexpCache = {};\n\n  function getAttrRegexp(attr) {\n    var regexp = attrRegexpCache[attr];\n    if (regexp) return regexp;\n    return attrRegexpCache[attr] = new RegExp(\"\\\\s+\" + attr + \"\\\\s*=\\\\s*('|\\\")?([^'\\\"]+)('|\\\")?\\\\s*\");\n  }\n\n  function getAttrValue(text, attr) {\n    var match = text.match(getAttrRegexp(attr));\n    return match ? /^\\s*(.*?)\\s*$/.exec(match[2])[1] : \"\";\n  }\n\n  function getTagRegexp(tagName, anchored) {\n    return new RegExp((anchored ? \"^\" : \"\") + \"<\\/\\s*\" + tagName + \"\\s*>\", \"i\");\n  }\n\n  function addTags(from, to) {\n    for (var tag in from) {\n      var dest = to[tag] || (to[tag] = []);\n      var source = from[tag];\n\n      for (var i = source.length - 1; i >= 0; i--) {\n        dest.unshift(source[i]);\n      }\n    }\n  }\n\n  function findMatchingMode(tagInfo, tagText) {\n    for (var i = 0; i < tagInfo.length; i++) {\n      var spec = tagInfo[i];\n      if (!spec[0] || spec[1].test(getAttrValue(tagText, spec[0]))) return spec[2];\n    }\n  }\n\n  CodeMirror.defineMode(\"htmlmixed\", function (config, parserConfig) {\n    var htmlMode = CodeMirror.getMode(config, {\n      name: \"xml\",\n      htmlMode: true,\n      multilineTagIndentFactor: parserConfig.multilineTagIndentFactor,\n      multilineTagIndentPastTag: parserConfig.multilineTagIndentPastTag\n    });\n    var tags = {};\n    var configTags = parserConfig && parserConfig.tags,\n        configScript = parserConfig && parserConfig.scriptTypes;\n    addTags(defaultTags, tags);\n    if (configTags) addTags(configTags, tags);\n    if (configScript) for (var i = configScript.length - 1; i >= 0; i--) {\n      tags.script.unshift([\"type\", configScript[i].matches, configScript[i].mode]);\n    }\n\n    function html(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState),\n          tag = /\\btag\\b/.test(style),\n          tagName;\n\n      if (tag && !/[<>\\s\\/]/.test(stream.current()) && (tagName = state.htmlState.tagName && state.htmlState.tagName.toLowerCase()) && tags.hasOwnProperty(tagName)) {\n        state.inTag = tagName + \" \";\n      } else if (state.inTag && tag && />$/.test(stream.current())) {\n        var inTag = /^([\\S]+) (.*)/.exec(state.inTag);\n        state.inTag = null;\n        var modeSpec = stream.current() == \">\" && findMatchingMode(tags[inTag[1]], inTag[2]);\n        var mode = CodeMirror.getMode(config, modeSpec);\n        var endTagA = getTagRegexp(inTag[1], true),\n            endTag = getTagRegexp(inTag[1], false);\n\n        state.token = function (stream, state) {\n          if (stream.match(endTagA, false)) {\n            state.token = html;\n            state.localState = state.localMode = null;\n            return null;\n          }\n\n          return maybeBackup(stream, endTag, state.localMode.token(stream, state.localState));\n        };\n\n        state.localMode = mode;\n        state.localState = CodeMirror.startState(mode, htmlMode.indent(state.htmlState, \"\", \"\"));\n      } else if (state.inTag) {\n        state.inTag += stream.current();\n        if (stream.eol()) state.inTag += \" \";\n      }\n\n      return style;\n    }\n\n    ;\n    return {\n      startState: function startState() {\n        var state = CodeMirror.startState(htmlMode);\n        return {\n          token: html,\n          inTag: null,\n          localMode: null,\n          localState: null,\n          htmlState: state\n        };\n      },\n      copyState: function copyState(state) {\n        var local;\n\n        if (state.localState) {\n          local = CodeMirror.copyState(state.localMode, state.localState);\n        }\n\n        return {\n          token: state.token,\n          inTag: state.inTag,\n          localMode: state.localMode,\n          localState: local,\n          htmlState: CodeMirror.copyState(htmlMode, state.htmlState)\n        };\n      },\n      token: function token(stream, state) {\n        return state.token(stream, state);\n      },\n      indent: function indent(state, textAfter, line) {\n        if (!state.localMode || /^\\s*<\\//.test(textAfter)) return htmlMode.indent(state.htmlState, textAfter, line);else if (state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);else return CodeMirror.Pass;\n      },\n      innerMode: function innerMode(state) {\n        return {\n          state: state.localState || state.htmlState,\n          mode: state.localMode || htmlMode\n        };\n      }\n    };\n  }, \"xml\", \"javascript\", \"css\");\n  CodeMirror.defineMIME(\"text/html\", \"htmlmixed\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var paramData = {\n    noEndTag: true,\n    soyState: \"param-def\"\n  };\n  var tags = {\n    \"alias\": {\n      noEndTag: true\n    },\n    \"delpackage\": {\n      noEndTag: true\n    },\n    \"namespace\": {\n      noEndTag: true,\n      soyState: \"namespace-def\"\n    },\n    \"@param\": paramData,\n    \"@param?\": paramData,\n    \"@inject\": paramData,\n    \"@inject?\": paramData,\n    \"@state\": paramData,\n    \"template\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"literal\": {},\n    \"msg\": {},\n    \"fallbackmsg\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"select\": {},\n    \"plural\": {},\n    \"let\": {\n      soyState: \"var-def\"\n    },\n    \"if\": {},\n    \"elseif\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"else\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"switch\": {},\n    \"case\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"default\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"foreach\": {\n      variableScope: true,\n      soyState: \"var-def\"\n    },\n    \"ifempty\": {\n      noEndTag: true,\n      reduceIndent: true\n    },\n    \"for\": {\n      variableScope: true,\n      soyState: \"var-def\"\n    },\n    \"call\": {\n      soyState: \"templ-ref\"\n    },\n    \"param\": {\n      soyState: \"param-ref\"\n    },\n    \"print\": {\n      noEndTag: true\n    },\n    \"deltemplate\": {\n      soyState: \"templ-def\",\n      variableScope: true\n    },\n    \"delcall\": {\n      soyState: \"templ-ref\"\n    },\n    \"log\": {},\n    \"element\": {\n      variableScope: true\n    }\n  };\n  var indentingTags = Object.keys(tags).filter(function (tag) {\n    return !tags[tag].noEndTag || tags[tag].reduceIndent;\n  });\n  CodeMirror.defineMode(\"soy\", function (config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {\n        name: \"text/html\",\n        multilineTagIndentFactor: 2,\n        multilineTagIndentPastTag: false\n      }),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {\n        name: \"text/javascript\",\n        statementIndent: 2 * config.indentUnit\n      })\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n\n        if (indent) return null;\n      }\n\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n\n      var result = stream.hideFirstChars(state.indent, function () {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n\n    function popcontext(state) {\n      if (!state.context) return;\n\n      if (state.context.scope) {\n        state.variables = state.context.scope;\n      }\n\n      state.context = state.context.previousContext;\n    } // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n\n\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : loose ? \"variable\" : \"variable-2 error\";\n    } // Data for an open soy tag.\n\n\n    function Context(previousContext, tag, scope) {\n      this.previousContext = previousContext;\n      this.tag = tag;\n      this.kind = null;\n      this.scope = scope;\n    }\n\n    function expression(stream, state) {\n      var match;\n\n      if (stream.match(/[[]/)) {\n        state.soyState.push(\"list-literal\");\n        state.lookupVariables = false;\n        return null;\n      } else if (stream.match(/map\\b/)) {\n        state.soyState.push(\"map-literal\");\n        return \"keyword\";\n      } else if (stream.match(/record\\b/)) {\n        state.soyState.push(\"record-literal\");\n        return \"keyword\";\n      } else if (stream.match(/([\\w]+)(?=\\()/)) {\n        return \"variable callee\";\n      } else if (match = stream.match(/^[\"']/)) {\n        state.soyState.push(\"string\");\n        state.quoteKind = match[0];\n        return \"string\";\n      } else if (stream.match(/^[(]/)) {\n        state.soyState.push(\"open-parentheses\");\n        return null;\n      } else if (stream.match(/(null|true|false)(?!\\w)/) || stream.match(/0x([0-9a-fA-F]{2,})/) || stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {\n        return \"atom\";\n      } else if (stream.match(/(\\||[+\\-*\\/%]|[=!]=|\\?:|[<>]=?)/)) {\n        // Tokenize filter, binary, null propagator, and equality operators.\n        return \"operator\";\n      } else if (match = stream.match(/^\\$([\\w]+)/)) {\n        return ref(state.variables, match[1], !state.lookupVariables);\n      } else if (match = stream.match(/^\\w+/)) {\n        return /^(?:as|and|or|not|in|if)$/.test(match[0]) ? \"keyword\" : null;\n      }\n\n      stream.next();\n      return null;\n    }\n\n    return {\n      startState: function startState() {\n        return {\n          soyState: [],\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          context: null,\n          lookupVariables: true,\n          // Is unknown variables considered an error\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n      copyState: function copyState(state) {\n        return {\n          tag: state.tag,\n          // Last seen Soy tag.\n          soyState: state.soyState.concat([]),\n          variables: state.variables,\n          context: state.context,\n          indent: state.indent,\n          // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          lookupVariables: state.lookupVariables,\n          localStates: state.localStates.map(function (localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n      token: function token(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n\n            if (!state.context || !state.context.scope) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n\n              for (var match; match = paramRe.exec(current);) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n\n            return \"comment\";\n\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n\n            return \"string\";\n        }\n\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop(); // If the first character is '.', it can only be a local template.\n\n              if (match[0][0] == '.') {\n                return \"variable-2\";\n              } // Otherwise\n\n\n              return \"variable\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"open-parentheses\":\n            if (stream.match(/[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            return expression(stream, state);\n\n          case \"param-type\":\n            var peekChar = stream.peek();\n\n            if (\"}]=>,\".indexOf(peekChar) != -1) {\n              state.soyState.pop();\n              return null;\n            } else if (peekChar == \"[\") {\n              state.soyState.push('param-type-record');\n              return null;\n            } else if (match = stream.match(/^([\\w]+|[?])/)) {\n              if (match[0] == \"map\" || match[0] == \"list\") {\n                state.soyState.push('param-type-map-list');\n              }\n\n              return \"type\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type-record\":\n            var peekChar = stream.peek();\n\n            if (peekChar == \"]\") {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/^\\w+/)) {\n              state.soyState.push('param-type');\n              return \"property\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"param-type-map-list\":\n            var peekChar = stream.peek();\n\n            if (stream.match(/^[>]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/^[<,]/)) {\n              state.soyState.push('param-type');\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n\n            stream.next();\n            return null;\n\n          case \"record-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"record-key\");\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"map-literal\":\n            if (stream.match(/^[)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            if (stream.match(/[(,]/)) {\n              state.soyState.push(\"map-value\");\n              state.soyState.push(\"map-value\");\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"list-literal\":\n            if (stream.match(/\\]/)) {\n              state.soyState.pop();\n              state.lookupVariables = true;\n              return null;\n            }\n\n            if (stream.match(/for\\b/)) {\n              state.soyState.push(\"var-def\");\n              return \"keyword\";\n            } else if (stream.match(/in\\b/)) {\n              state.lookupVariables = true;\n              return \"keyword\";\n            }\n\n            return expression(stream, state);\n\n          case \"record-key\":\n            if (stream.match(/[\\w]+/)) {\n              return \"property\";\n            }\n\n            if (stream.match(/^[:]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            stream.next();\n            return null;\n\n          case \"map-value\":\n            if (stream.peek() == \")\" || stream.peek() == \",\" || stream.match(/^[:)]/)) {\n              state.soyState.pop();\n              return null;\n            }\n\n            return expression(stream, state);\n\n          case \"tag\":\n            var endTag = state.tag[0] == \"/\";\n            var tagName = endTag ? state.tag.substring(1) : state.tag;\n            var tag = tags[tagName];\n\n            if (stream.match(/^\\/?}/)) {\n              var selfClosed = stream.current() == \"/}\";\n\n              if (selfClosed && !endTag) {\n                popcontext(state);\n              }\n\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                state.indent -= config.indentUnit * (selfClosed || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (state.context && state.context.tag == tagName && stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.context.kind = kind;\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\", \"\");\n                }\n\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n\n              return \"attribute\";\n            }\n\n            return expression(stream, state);\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n        }\n\n        if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          state.context = new Context(state.context, \"literal\", state.variables);\n          return \"keyword\"; // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          var prevTag = state.tag;\n          state.tag = match[1];\n          var endTag = state.tag[0] == \"/\";\n          var indentingTag = !!tags[state.tag];\n          var tagName = endTag ? state.tag.substring(1) : state.tag;\n          var tag = tags[tagName];\n          if (state.tag != \"/switch\") state.indent += ((endTag || tag && tag.reduceIndent) && prevTag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.soyState.push(\"tag\");\n          var tagError = false;\n\n          if (tag) {\n            if (!endTag) {\n              if (tag.soyState) state.soyState.push(tag.soyState);\n            } // If a new tag, open a new context.\n\n\n            if (!tag.noEndTag && (indentingTag || !endTag)) {\n              state.context = new Context(state.context, state.tag, tag.variableScope ? state.variables : null); // Otherwise close the current context.\n            } else if (endTag) {\n              if (!state.context || state.context.tag != tagName) {\n                tagError = true;\n              } else if (state.context) {\n                if (state.context.kind) {\n                  state.localStates.pop();\n                  var localState = last(state.localStates);\n\n                  if (localState.mode.indent) {\n                    state.indent -= localState.mode.indent(localState.state, \"\", \"\");\n                  }\n                }\n\n                popcontext(state);\n              }\n            }\n          } else if (endTag) {\n            // Assume all tags with a closing tag are defined in the config.\n            tagError = true;\n          }\n\n          return (tagError ? \"error \" : \"\") + \"keyword\"; // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n      indent: function indent(state, textAfter, line) {\n        var indent = state.indent,\n            top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n\n        var localState = last(state.localStates);\n\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter, line);\n        }\n\n        return indent;\n      },\n      innerMode: function innerMode(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;else return last(state.localStates);\n      },\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", Object.keys(tags).concat([\"css\", \"debugger\"]));\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});"],"sourceRoot":""}